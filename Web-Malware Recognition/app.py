import os
import uuid
import flask
import urllib
from PIL import Image
from math import log
import numpy as np
from keras.models import load_model
from flask import Flask, render_template, request, send_file
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import tensorflow as tf

app = Flask(__name__)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
json_file = open("E:\Work\IoTMalWare\malware_model.json", 'r')


loaded_model_json = json_file.read()

json_file.close()

model = tf.keras.models.model_from_json(loaded_model_json)

model.load_weights("E:\Work\IoTMalWare\malware_model.h5")


ALLOWED_EXT = set(['jpg', 'jpeg', 'png', 'jfif', 'bytes'])


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1] in ALLOWED_EXT


classes = ['Adialer.C', 'Agent.FYI', 'Allaple.A', 'Allaple.L', 'Alueron.gen!J', 'Autorun.K', 'C2LOP.P', 'C2LOP.gen!g', 'Dialplatform.B',
           'Dontovo.A', 'Fakerean', 'Instantaccess', 'Lolyda.AA1', 'Lolyda.AA2', 'Lolyda.AA3', 'Lolyda.AT', 'Malex.gen!J', 'Obfuscator.AD',
           'Rbot!gen', 'Skintrim.N', 'Swizzor.gen!E', 'Swizzor.gen!I', 'VB.AT', 'Wintrim.BX', 'Yuner.A']


def convertToBinaryImg(array, name):
    if array.shape[1] != 16:
        assert(False)
    b = int((array.shape[0]*16)**0.5)
    b = 2**(int(log(b)/log(2)) + 1)
    a = int(array.shape[0]*16/b)
    array = array[:a*b//16,:]
    array = np.reshape(array, (a,b))
    img = Image.fromarray(np.uint8(array))
    #img.save(dirr+'\\'+name+'.png', "PNG")
    return img


def predict(filename, model):
    img = load_img(filename, target_size=(64, 64))
    img = img_to_array(img)
    img = img.reshape(1, 64, 64, 3)

    img = img.astype('float32')
    img = img/255.0
    result = model.predict(img)

    dict_result = {}
    for i in range(25):
        dict_result[result[0][i]] = classes[i]

    res = result[0]
    res.sort()
    res = res[::-1]
    prob = res[:3]

    prob_result = []
    class_result = []
    for i in range(3):
        prob_result.append((prob[i]*100).round(2))
        class_result.append(dict_result[prob[i]])

    return class_result, prob_result


@app.route('/')
def home():
    return render_template("index.html")


@app.route('/success', methods=['GET', 'POST'])
def success():
    error = ''
    target_img = os.path.join(
        os.getcwd(), 'Web-Malware Recognition\static\images')
    if request.method == 'POST':
        # if (request.form):
        #     link = request.form.get('link')
        #     try:
        #         resource = urllib.request.urlopen(link)
        #         unique_filename = str(uuid.uuid4())
        #         print(unique_filename)
        #         filename = unique_filename+".jpg"
        #         img_path = os.path.join(target_img, filename)
        #         output = open(img_path, "wb")
        #         output.write(resource.read())
        #         output.close()
        #         img = filename

        #         class_result, prob_result = predict(img_path, model)

        #         predictions = {
        #             "class1": class_result[0],
        #             "class2": class_result[1],
        #             "class3": class_result[2],
        #             "prob1": prob_result[0],
        #             "prob2": prob_result[1],
        #             "prob3": prob_result[2],
        #         }

        #     except Exception as e:
        #         print(str(e))
        #         error = 'This image from this site is not accesible or inappropriate input'

        #     if (len(error) == 0):
        #         return render_template('success.html', img=img, predictions=predictions)
        #     else:
        #         return render_template('index.html', error=error)

        # elif (request.files):
            file = request.files['file']
            if file and allowed_file(file.filename):
                print(file.filename)
                name = file.filename
                if '.bytes' != name[-6:]:
                    print("Wrong")
                else:
                    f = open(target_img + '\\' + name)
                    arr = []
                    for line in f:
                        xx = line.split()
                        if len(xx) != 17:
                            continue
                        arr.append([int(i,16) if i != '??' else 0 for i in xx[1:]])
                    res = convertToBinaryImg(np.array(arr), name)
                    image = res.save(target_img + '\\' + name + '.png', 'PNG')
                    f.close()
                # file.save(os.path.join(target_img, file.filename))
                img_path = os.path.join(target_img, image.filename)
                img = image.filename
                

                class_result, prob_result = predict(img_path, model)

                predictions = {
                    "class1": class_result[0],
                    "class2": class_result[1],
                    "class3": class_result[2],
                    "prob1": prob_result[0],
                    "prob2": prob_result[1],
                    "prob3": prob_result[2],
                }

            else:
                error = "Please upload images of jpg , jpeg and png extension only"

            if (len(error) == 0):
                return render_template('success.html', img=img, predictions=predictions)
            else:
                return render_template('index.html', error=error)

    else:
        return render_template('index.html')


if __name__ == "__main__":
    app.run(debug=True)
